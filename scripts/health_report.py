import json
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime, timedelta
import statistics

def load_all_health_data():
    """Load all health tracking data"""
    # Sample comprehensive health data
    weight_data = [
        {"id": "1", "date": "2024-01-01", "weight": 70.5},
        {"id": "2", "date": "2024-01-08", "weight": 70.2},
        {"id": "3", "date": "2024-01-15", "weight": 69.8},
        {"id": "4", "date": "2024-01-22", "weight": 69.5},
        {"id": "5", "date": "2024-01-29", "weight": 69.3},
    ]
    
    calorie_data = [
        {"date": "2024-01-01", "totalCalories": 1402, "carbs": 155, "protein": 75, "fat": 53},
        {"date": "2024-01-02", "totalCalories": 1382, "carbs": 143, "protein": 93, "fat": 50},
        {"date": "2024-01-03", "totalCalories": 1410, "carbs": 158, "protein": 82, "fat": 48},
        {"date": "2024-01-04", "totalCalories": 1395, "carbs": 150, "protein": 88, "fat": 52},
        {"date": "2024-01-05", "totalCalories": 1420, "carbs": 162, "protein": 78, "fat": 55},
    ]
    
    personal_info = {
        "age": 28,
        "gender": "male",
        "height": 175,
        "activity_level": "moderate",
        "bmr": 1680,
        "tdee": 2604
    }
    
    return weight_data, calorie_data, personal_info

def calculate_health_score(weight_data, calorie_data, personal_info):
    """Calculate overall health tracking score"""
    score = 0
    max_score = 100
    
    # Weight tracking consistency (25 points)
    if len(weight_data) >= 5:
        score += 25
    elif len(weight_data) >= 3:
        score += 15
    elif len(weight_data) >= 1:
        score += 5
    
    # Calorie tracking consistency (25 points)
    if len(calorie_data) >= 7:
        score += 25
    elif len(calorie_data) >= 5:
        score += 15
    elif len(calorie_data) >= 3:
        score += 10
    elif len(calorie_data) >= 1:
        score += 5
    
    # Calorie balance (25 points)
    if calorie_data and personal_info.get('tdee'):
        avg_calories = statistics.mean([day['totalCalories'] for day in calorie_data])
        tdee = personal_info['tdee']
        
        # Ideal range: within 200 calories of TDEE
        calorie_diff = abs(avg_calories - tdee)
        if calorie_diff <= 100:
            score += 25
        elif calorie_diff <= 200:
            score += 20
        elif calorie_diff <= 300:
            score += 15
        elif calorie_diff <= 500:
            score += 10
        else:
            score += 5
    
    # Macro balance (25 points)
    if calorie_data:
        total_carbs = sum([day['carbs'] for day in calorie_data])
        total_protein = sum([day['protein'] for day in calorie_data])
        total_fat = sum([day['fat'] for day in calorie_data])
        
        total_macro_calories = (total_carbs * 4) + (total_protein * 4) + (total_fat * 9)
        
        if total_macro_calories > 0:
            carb_pct = (total_carbs * 4) / total_macro_calories * 100
            protein_pct = (total_protein * 4) / total_macro_calories * 100
            fat_pct = (total_fat * 9) / total_macro_calories * 100
            
            # Ideal ranges: Carbs 45-65%, Protein 15-25%, Fat 20-35%
            carb_score = 10 if 45 <= carb_pct <= 65 else 5 if 35 <= carb_pct <= 75 else 0
            protein_score = 10 if 15 <= protein_pct <= 25 else 5 if 10 <= protein_pct <= 30 else 0
            fat_score = 5 if 20 <= fat_pct <= 35 else 2 if 15 <= fat_pct <= 40 else 0
            
            score += carb_score + protein_score + fat_score
    
    return min(score, max_score)

def generate_comprehensive_report(weight_data, calorie_data, personal_info):
    """Generate comprehensive health tracking report"""
    health_score = calculate_health_score(weight_data, calorie_data, personal_info)
    
    # Weight analysis
    weight_analysis = ""
    if len(weight_data) >= 2:
        current_weight = weight_data[-1]['weight']
        start_weight = weight_data[0]['weight']
        weight_change = current_weight - start_weight
        
        weight_analysis = f"""
üìè PH√ÇN T√çCH C√ÇN N·∫∂NG:
‚Ä¢ C√¢n n·∫∑ng hi·ªán t·∫°i: {current_weight} kg
‚Ä¢ Thay ƒë·ªïi t·ªïng: {weight_change:+.1f} kg
‚Ä¢ Xu h∆∞·ªõng: {'Gi·∫£m c√¢n' if weight_change < 0 else 'TƒÉng c√¢n' if weight_change > 0 else '·ªîn ƒë·ªãnh'}
"""
    
    # Calorie analysis
    calorie_analysis = ""
    if calorie_data:
        avg_calories = statistics.mean([day['totalCalories'] for day in calorie_data])
        avg_carbs = statistics.mean([day['carbs'] for day in calorie_data])
        avg_protein = statistics.mean([day['protein'] for day in calorie_data])
        avg_fat = statistics.mean([day['fat'] for day in calorie_data])
        
        calorie_analysis = f"""
üçé PH√ÇN T√çCH DINH D∆Ø·ª†NG:
‚Ä¢ Calo trung b√¨nh: {avg_calories:.0f} kcal/ng√†y
‚Ä¢ Carbs trung b√¨nh: {avg_carbs:.0f}g/ng√†y
‚Ä¢ Protein trung b√¨nh: {avg_protein:.0f}g/ng√†y
‚Ä¢ Fat trung b√¨nh: {avg_fat:.0f}g/ng√†y
"""
    
    # BMR/TDEE analysis
    bmr_analysis = ""
    if personal_info.get('bmr') and personal_info.get('tdee'):
        bmr_analysis = f"""
‚ö° PH√ÇN T√çCH NƒÇNG L∆Ø·ª¢NG:
‚Ä¢ BMR (Trao ƒë·ªïi ch·∫•t c∆° b·∫£n): {personal_info['bmr']} kcal/ng√†y
‚Ä¢ TDEE (T·ªïng nƒÉng l∆∞·ª£ng ti√™u th·ª•): {personal_info['tdee']} kcal/ng√†y
‚Ä¢ M·ª©c ƒë·ªô ho·∫°t ƒë·ªông: {personal_info.get('activity_level', 'Ch∆∞a x√°c ƒë·ªãnh')}
"""
    
    # Health score interpretation
    if health_score >= 80:
        score_interpretation = "Xu·∫•t s·∫Øc! B·∫°n ƒëang theo d√µi s·ª©c kh·ªèe r·∫•t t·ªët."
    elif health_score >= 60:
        score_interpretation = "T·ªët! H√£y ti·∫øp t·ª•c duy tr√¨ th√≥i quen theo d√µi."
    elif health_score >= 40:
        score_interpretation = "Kh√° t·ªët, nh∆∞ng c√≥ th·ªÉ c·∫£i thi·ªán th√™m."
    else:
        score_interpretation = "C·∫ßn c·∫£i thi·ªán vi·ªác theo d√µi s·ª©c kh·ªèe."
    
    report = f"""
=== B√ÅO C√ÅO T·ªîNG H·ª¢P S·ª®C KH·ªéE ===

üèÜ ƒêI·ªÇM S·ª®C KH·ªéE T·ªîNG TH·ªÇ: {health_score}/100
{score_interpretation}

{weight_analysis}
{calorie_analysis}
{bmr_analysis}

üìä CH·ªà S·ªê THEO D√ïI:
‚Ä¢ S·ªë ng√†y theo d√µi c√¢n n·∫∑ng: {len(weight_data)}
‚Ä¢ S·ªë ng√†y theo d√µi calo: {len(calorie_data)}
‚Ä¢ T√≠nh nh·∫•t qu√°n: {'T·ªët' if len(weight_data) >= 5 and len(calorie_data) >= 7 else 'C·∫ßn c·∫£i thi·ªán'}

üí° KHUY·∫æN NGH·ªä:
"""
    
    # Add recommendations
    if len(weight_data) < 5:
        report += "‚Ä¢ H√£y theo d√µi c√¢n n·∫∑ng th∆∞·ªùng xuy√™n h∆°n (√≠t nh·∫•t 2 l·∫ßn/tu·∫ßn)\n"
    
    if len(calorie_data) < 7:
        report += "‚Ä¢ Ghi nh·∫≠n calo h√†ng ng√†y ƒë·ªÉ c√≥ d·ªØ li·ªáu ch√≠nh x√°c h∆°n\n"
    
    if calorie_data and personal_info.get('tdee'):
        avg_calories = statistics.mean([day['totalCalories'] for day in calorie_data])
        if abs(avg_calories - personal_info['tdee']) > 300:
            report += f"‚Ä¢ ƒêi·ªÅu ch·ªânh l∆∞·ª£ng calo g·∫ßn v·ªõi TDEE ({personal_info['tdee']} kcal) h∆°n\n"
    
    if health_score < 60:
        report += "‚Ä¢ TƒÉng c∆∞·ªùng theo d√µi ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ c·∫£i thi·ªán s·ª©c kh·ªèe\n"
    
    report += "\nüéØ M·ª§C TI√äU TI·∫æP THEO:"
    report += "\n‚Ä¢ Duy tr√¨ vi·ªác theo d√µi h√†ng ng√†y"
    report += "\n‚Ä¢ C√¢n b·∫±ng t·ªët h∆°n gi·ªØa c√°c ch·∫•t dinh d∆∞·ª°ng"
    report += "\n‚Ä¢ Thi·∫øt l·∫≠p m·ª•c ti√™u s·ª©c kh·ªèe c·ª• th·ªÉ"
    
    return report

def create_dashboard_chart(weight_data, calorie_data, personal_info):
    """Create comprehensive health dashboard"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # 1. Weight trend
    if len(weight_data) >= 2:
        dates = [datetime.strptime(entry['date'], '%Y-%m-%d') for entry in weight_data]
        weights = [entry['weight'] for entry in weight_data]
        
        ax1.plot(dates, weights, 'o-', linewidth=3, markersize=8, color='#0891b2')
        ax1.set_title('Xu H∆∞·ªõng C√¢n N·∫∑ng', fontsize=16, fontweight='bold')
        ax1.set_ylabel('C√¢n n·∫∑ng (kg)')
        ax1.grid(True, alpha=0.3)
    
    # 2. Daily calories vs TDEE
    if calorie_data:
        dates = [datetime.strptime(entry['date'], '%Y-%m-%d') for entry in calorie_data]
        calories = [entry['totalCalories'] for entry in calorie_data]
        
        ax2.bar(dates, calories, color='#f97316', alpha=0.7, label='Calo th·ª±c t·∫ø')
        if personal_info.get('tdee'):
            ax2.axhline(y=personal_info['tdee'], color='red', linestyle='--', 
                       linewidth=2, label=f'TDEE: {personal_info["tdee"]} kcal')
        ax2.set_title('Calo H√†ng Ng√†y vs TDEE', fontsize=16, fontweight='bold')
        ax2.set_ylabel('Calo (kcal)')
        ax2.legend()
        ax2.tick_params(axis='x', rotation=45)
    
    # 3. Macro distribution
    if calorie_data:
        total_carbs = sum([day['carbs'] for day in calorie_data]) * 4
        total_protein = sum([day['protein'] for day in calorie_data]) * 4
        total_fat = sum([day['fat'] for day in calorie_data]) * 9
        
        macro_data = [total_carbs, total_protein, total_fat]
        macro_labels = ['Carbs', 'Protein', 'Fat']
        colors = ['#0891b2', '#f97316', '#d97706']
        
        ax3.pie(macro_data, labels=macro_labels, colors=colors, autopct='%1.1f%%', 
                startangle=90, textprops={'fontsize': 12})
        ax3.set_title('Ph√¢n B·ªï Macro T·ªïng Th·ªÉ', fontsize=16, fontweight='bold')
    
    # 4. Health score gauge
    health_score = calculate_health_score(weight_data, calorie_data, personal_info)
    
    # Create a simple gauge chart
    theta = np.linspace(0, np.pi, 100)
    r = np.ones_like(theta)
    
    ax4.plot(theta, r, 'k-', linewidth=8, alpha=0.3)
    
    # Color segments based on score ranges
    if health_score >= 80:
        color = 'green'
    elif health_score >= 60:
        color = 'orange'
    else:
        color = 'red'
    
    score_theta = np.linspace(0, np.pi * (health_score/100), 50)
    score_r = np.ones_like(score_theta)
    ax4.plot(score_theta, score_r, color=color, linewidth=8)
    
    ax4.set_ylim(0, 1.2)
    ax4.set_xlim(0, np.pi)
    ax4.set_title(f'ƒêi·ªÉm S·ª©c Kh·ªèe: {health_score}/100', fontsize=16, fontweight='bold')
    ax4.text(np.pi/2, 0.5, f'{health_score}', ha='center', va='center', 
             fontsize=24, fontweight='bold', color=color)
    ax4.set_xticks([])
    ax4.set_yticks([])
    ax4.spines['top'].set_visible(False)
    ax4.spines['right'].set_visible(False)
    ax4.spines['bottom'].set_visible(False)
    ax4.spines['left'].set_visible(False)
    
    plt.tight_layout()
    plt.show()
    
    return fig

# Main execution
if __name__ == "__main__":
    print("üè• B√ÅO C√ÅO T·ªîNG H·ª¢P S·ª®C KH·ªéE")
    print("=" * 50)
    
    # Load all health data
    weight_data, calorie_data, personal_info = load_all_health_data()
    
    print(f"üìä D·ªØ li·ªáu ƒë√£ t·∫£i:")
    print(f"‚Ä¢ {len(weight_data)} ƒëi·ªÉm d·ªØ li·ªáu c√¢n n·∫∑ng")
    print(f"‚Ä¢ {len(calorie_data)} ng√†y d·ªØ li·ªáu calo")
    print(f"‚Ä¢ Th√¥ng tin c√° nh√¢n: {personal_info.get('age')} tu·ªïi, {personal_info.get('gender')}")
    
    # Calculate health score
    health_score = calculate_health_score(weight_data, calorie_data, personal_info)
    print(f"\nüèÜ ƒêi·ªÉm s·ª©c kh·ªèe t·ªïng th·ªÉ: {health_score}/100")
    
    # Generate comprehensive report
    report = generate_comprehensive_report(weight_data, calorie_data, personal_info)
    print(report)
    
    # Create dashboard
    print("\nüìà ƒêang t·∫°o dashboard t·ªïng h·ª£p...")
    create_dashboard_chart(weight_data, calorie_data, personal_info)
    
    print("\n‚úÖ Ho√†n th√†nh b√°o c√°o t·ªïng h·ª£p s·ª©c kh·ªèe!")
